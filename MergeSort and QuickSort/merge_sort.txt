package testing;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Nested_Interfaces{
	/* Merge Sort function */
	public static void sort(int[] a, int low, int high){
		int N = high - low;         
		if (N <= 1) 
			return; 
		int mid = low + N/2; 
		// recursively sort 
		sort(a, low, mid); 
		sort(a, mid, high); 
		// merge two sorted subarrays
		int[] temp = new int[N];
		int i = low, j = mid;
		for (int k = 0; k < N; k++){
			if (i == mid)  
				temp[k] = a[j++];
			else if (j == high) 
				temp[k] = a[i++];
			else if (a[j]<a[i]) 
				temp[k] = a[j++];
			else 
				temp[k] = a[i++];
		}    
		for (int k = 0; k < N; k++) 
			a[low + k] = temp[k];         
		}

		/* Generate Random Number */
		private int[] generateRandomNumbers(int n){	
			int[] result = new int[n];
			Random random = new Random();	
			for (int i = 0; i < result.length; i++){
				result[i] = random.nextInt(n * 10);
			}
			return result;
		}

		/* Main method */
		public static void main(String[] args){
			Nested_Interfaces app= new Nested_Interfaces();
			long start = System.currentTimeMillis();	
			Scanner scan = new Scanner(System.in);        
			System.out.println("Implementation of Merge Sort");
			int n, i;
			/* Accept number of elements from input*/
			System.out.println("Enter length of array:");
			n = scan.nextInt();
		    /* Create array of n elements */
		    int arr[] = new int[ n ];
		    /* Accept elements */
		    System.out.println("\nEnter "+ n +" integer elements");
		    for (i = 0; i < n; i++)
		        arr[i] = scan.nextInt();
		    /* Call method sort */
		    sort(arr, 0, n);
		    /* Print sorted Array */
		    System.out.println("\nElements after sorting ");        
		    for (i = 0; i < n; i++)
		        System.out.print(arr[i]+" ");            
		    System.out.println();
			
			/* This code snippet is used to iterate over 1000,1500,2000 - */
			/*
			 System.out.println("Enter the size of the array :");
			 int r = scan.nextInt();
			 int[] arr = new int[r]; //= app.generateRandomNumbers(r);
			 for (i = 0; i < r; i++)
				arr[i] = i+1;
			 System.out.println("Elements before sorting:");
			 for (i = 0; i < r; i++)
				System.out.print(arr[i]+" ");
			 // Call method sort
			 sort(arr, 0, r);
			 // Print sorted Array
			 System.out.println("\nElements after sorting ");        
			 for (i = 0; i < r; i++)
				System.out.print(arr[i]+" ");            
			*/
			
			/* Finding the running time of the merge sort algorithm*/
			long end = System.currentTimeMillis();
			NumberFormat formatter = new DecimalFormat("#0.00000");
			System.out.print("Total Execution time is " + formatter.format((end - start) / 1000d) + " mseconds");
		}    
}